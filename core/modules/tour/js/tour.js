/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal, document, drupalSettings) {
  var queryString = decodeURI(window.location.search);
  Drupal.behaviors.tour = {
    attach: function attach(context) {
      var _this = this;

      $('body').once('tour').each(function () {
        var modelId = btoa(Math.random()).substring(0, 12);
        var modelKey = "tourModel-".concat(modelId);
        var $tour = $(context).find('ol#tour');

        if ($tour.length) {
          $('#toolbar-tab-tour').removeClass('hidden');
          var $toggleButton = $('#toolbar-tab-tour').find('button');
          drupalSettings[modelKey] = {
            $el: $('#toolbar-tab-tour'),
            tour: $tour,
            isActive: /tour=?/i.test(queryString),
            activeTour: []
          };

          var renderTour = function renderTour() {
            var tourSettings = drupalSettings[modelKey];
            tourSettings.$el.toggleClass('hidden', tourSettings.tour.length === 0);
            var isActive = tourSettings.isActive;
            tourSettings.$el.find('button').toggleClass('is-active', isActive).prop('aria-pressed', isActive);
            return _this;
          };

          var toggleTour = function toggleTour() {
            var tourSettings = drupalSettings[modelKey];

            var _removeIrrelevantTourItems = function _removeIrrelevantTourItems() {
              var $document = $(document);
              var removals = false;
              var tips = /tips=([^&]+)/.exec(queryString);
              tourSettings.tour.find('li').each(function () {
                var $this = $(this);
                var itemId = $this.attr('data-id');
                var itemClass = $this.attr('data-class');

                if (tips && !$(this).hasClass(tips[1])) {
                  removals = true;
                  $this.remove();
                  return;
                }

                if (!itemId && !itemClass || itemId && $document.find("#".concat(itemId)).length || itemClass && $document.find(".".concat(itemClass)).length) {
                  return;
                }

                removals = true;
                $this.remove();
              });

              if (removals) {
                var total = tourSettings.tour.find('li').length;

                if (!total) {
                  Drupal.modelSet('render-tour', modelKey, {
                    tour: []
                  });
                } else {
                  tourSettings.tour.find('li').each(function (index) {
                    var progress = Drupal.t('!tour_item of !total', {
                      '!tour_item': index + 1,
                      '!total': total
                    });
                    $(this).find('.tour-progress').text(progress);
                  }).eq(-1).attr('data-text', Drupal.t('End tour'));
                }
              }
            };

            if (tourSettings.isActive) {
              _removeIrrelevantTourItems();

              var close = Drupal.t('Close');

              if (tourSettings.tour.find('li').length) {
                $tour.joyride({
                  autoStart: true,
                  postRideCallback: function postRideCallback() {
                    Drupal.modelSet('toggle-tour', modelKey, {
                      isActive: false
                    });
                  },
                  template: {
                    link: "<a href=\"#close\" class=\"joyride-close-tip\" aria-label=\"".concat(close, "\">&times;</a>"),
                    button: '<a href="#" class="button button--primary joyride-next-tip"></a>'
                  }
                });
                Drupal.modelSet('render-tour', modelKey, {
                  activeTour: $tour
                });
              }
            } else if (tourSettings.activeTour.length) {
              tourSettings.activeTour.joyride('destroy');
              Drupal.modelSet('render-tour', modelKey, {
                activeTour: []
              });
              tourSettings.activeTour = [];
            }
          };

          renderTour();
          $toggleButton.get(0).addEventListener('click', function (e) {
            e.preventDefault();
            Drupal.modelSet('toggle-tour', modelKey, {
              isActive: !drupalSettings[modelKey].isActive
            });
          });
          Drupal.listenTo('toggle-tour', toggleTour);
          Drupal.listenTo('toggle-tour', renderTour);
          Drupal.listenTo('render-tour', renderTour);
        }
      });
    }
  };
})(jQuery, Drupal, document, drupalSettings);