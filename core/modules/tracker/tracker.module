<?php

/**
 * @file
 * Tracks recent content posted by a user or users.
 */

use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\comment\CommentInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function tracker_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.tracker':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Activity Tracker module displays the most recently added and updated content on your site, and allows you to follow new content created by each user. This module has no configuration options. For more information, see the <a href=":tracker">online documentation for the Activity Tracker module</a>.', [':tracker' => 'https://www.drupal.org/documentation/modules/tracker']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Tracking new and updated site content') . '</dt>';
      $output .= '<dd>' . t('The <a href=":recent">Recent content</a> page shows new and updated content in reverse chronological order, listing the content type, title, author\'s name, number of comments, and time of last update. Content is considered updated when changes occur in the text, or when new comments are added. The <em>My recent content</em> tab limits the list to the currently logged-in user.', [':recent' => Url::fromRoute('tracker.page')->toString()]) . '</dd>';
      $output .= '<dt>' . t('Tracking user-specific content') . '</dt>';
      $output .= '<dd>' . t("To follow a specific user's new and updated content, select the <em>Activity</em> tab from the user's profile page.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_cron().
 *
 * Updates tracking information for any items still to be tracked. The state
 * 'tracker.index_nid' is set to ((the last node ID that was indexed) - 1) and
 * used to select the nodes to be processed. If there are no remaining nodes to
 * process, 'tracker.index_nid' will be 0.
 * This process does not run regularly on live sites, rather it updates tracking
 * info once on an existing site just after the tracker module was installed.
 */
function tracker_cron() {
  \Drupal::service('tracker.storage')->updateAll();
}

/**
 * Implements hook_ENTITY_TYPE_insert() for node entities.
 *
 * Adds new tracking information for this node since it's new.
 */
function tracker_node_insert(NodeInterface $node, $arg = 0) {
  \Drupal::service('tracker.storage')->add($node->id(), $node->getOwnerId(), $node->getChangedTime());
}

/**
 * Implements hook_ENTITY_TYPE_update() for node entities.
 *
 * Adds tracking information for this node since it's been updated.
 */
function tracker_node_update(NodeInterface $node, $arg = 0) {
  \Drupal::service('tracker.storage')->add($node->id(), $node->getOwnerId(), $node->getChangedTime());
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for node entities.
 *
 * Deletes tracking information for a node.
 */
function tracker_node_predelete(EntityInterface $node, $arg = 0) {
  \Drupal::service('tracker.storage')->removeNode($node);
}

/**
 * Implements hook_ENTITY_TYPE_update() for comment entities.
 */
function tracker_comment_update(CommentInterface $comment) {
  if ($comment->getCommentedEntityTypeId() == 'node') {
    if ($comment->isPublished()) {
      \Drupal::service('tracker.storage')->add($comment->getCommentedEntityId(), $comment->getOwnerId(), $comment->getChangedTime());
    }
    else {
      \Drupal::service('tracker.storage')->remove($comment->getCommentedEntityId(), $comment->getOwnerId(), $comment->getChangedTime());
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for comment entities.
 */
function tracker_comment_insert(CommentInterface $comment) {
  if ($comment->getCommentedEntityTypeId() == 'node' && $comment->isPublished()) {
    \Drupal::service('tracker.storage')->add($comment->getCommentedEntityId(), $comment->getOwnerId(), $comment->getChangedTime());
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for comment entities.
 */
function tracker_comment_delete(CommentInterface $comment) {
  if ($comment->getCommentedEntityTypeId() == 'node') {
    \Drupal::service('tracker.storage')->remove($comment->getCommentedEntityId(), $comment->getOwnerId(), $comment->getChangedTime());
  }
}

/**
 * Updates indexing tables when a node is added, updated, or commented on.
 *
 * @param int $nid
 *   A node ID.
 * @param int $uid
 *   The node or comment author.
 * @param int $changed
 *   The node updated timestamp or comment timestamp.
 *
 * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use
 *   \Drupal\tracker\TrackerStorageInterface::add() instead.
 *
 * @see https://www.drupal.org/node/3209781
 */
function _tracker_add($nid, $uid, $changed) {
  @trigger_error('_tracker_add() is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use \Drupal\tracker\TrackerStorageInterface::add() instead. See https://www.drupal.org/node/3209781', E_USER_DEPRECATED);
  \Drupal::service('tracker.storage')->add($nid, $uid, $changed);
}

/**
 * Picks the most recent timestamp between node changed and the last comment.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node entity.
 *
 * @return int
 *   The node changed timestamp, or most recent comment timestamp, whichever is
 *   the greatest.
 *
 * @todo Check if we should introduce 'language context' here, because the
 *   callers may need different timestamps depending on the users' language?
 *
 * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use
 *   \Drupal\tracker\TrackerStorageInterface::calculateChanged() instead.
 *
 * @see https://www.drupal.org/node/3209781
 */
function _tracker_calculate_changed($node) {
  @trigger_error('_tracker_calculate_changed() is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use \Drupal\tracker\TrackerStorageInterface::calculateChanged() instead. See https://www.drupal.org/node/3209781', E_USER_DEPRECATED);
  return \Drupal::service('tracker.storage')->calculateChanged($node);
}

/**
 * Cleans up indexed data when nodes or comments are removed.
 *
 * @param int $nid
 *   The node ID.
 * @param int $uid
 *   The author of the node or comment.
 * @param int $changed
 *   The last changed timestamp of the node.
 *
 * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use
 *   \Drupal\tracker\TrackerStorageInterface::remove() instead.
 *
 * @see https://www.drupal.org/node/3209781
 */
function _tracker_remove($nid, $uid = NULL, $changed = NULL) {
  @trigger_error('_tracker_remove() is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use \Drupal\tracker\TrackerStorageInterface::remove() instead. See https://www.drupal.org/node/3209781', E_USER_DEPRECATED);
  \Drupal::service('tracker.storage')->remove($nid, $uid, $changed);
}
