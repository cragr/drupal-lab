<?php

/**
 * @file
 * Records which users have read which content.
 *
 * @todo
 * - Generic helper for _forum_user_last_visit() + history_read().
 * - Generic helper for node_mark().
 */

use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\user\UserInterface;

/**
 * Entities changed before this time are always shown as read.
 *
 * Entities changed within this time may be marked as new, updated, or read,
 * depending on their state for the current user. Defaults to 30 days ago.
 */
define('HISTORY_READ_LIMIT', REQUEST_TIME - 30 * 24 * 60 * 60);

/**
 * Implements hook_help().
 */
function history_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.history':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The History module keeps track of which content a user has read. It marks content as <em>new</em> or <em>updated</em> depending on the last time the user viewed it. History records that are older than one month are removed during cron, which means that content older than one month is always considered <em>read</em>. The History module does not have a user interface but it provides a filter to <a href=":views-help">Views</a> to show new or updated content. For more information, see the <a href=":url">online documentation for the History module</a>.', [':views-help' => (\Drupal::moduleHandler()->moduleExists('views')) ? Url::fromRoute('help.page', ['name' => 'views'])->toString() : '#', ':url' => 'https://www.drupal.org/documentation/modules/history']) . '</p>';
      return $output;
  }
}

/**
 * Retrieves the timestamp for the current user's last view of a specified node.
 *
 * @param int $nid
 *   A node ID.
 *
 * @return int
 *   If a node has been previously viewed by the user, the timestamp in seconds
 *   of when the last view occurred; otherwise, zero.
 *
 * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use
 *   \Drupal\history\HistoryRepositoryInterface::getLastViewed() instead.
 *
 * @see https://www.drupal.org/node/2197189
 */
function history_read($nid) {
  @trigger_error('history_read() is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use \Drupal\history\HistoryRepositoryInterface::getLastViewed() instead. See https://www.drupal.org/node/2197189', E_USER_DEPRECATED);
  $timestamps = \Drupal::service('history.repository')->getLastViewed('node', [$nid]);
  return $timestamps[$nid];
}

/**
 * Retrieves the last viewed timestamp for each of the passed node IDs.
 *
 * @param array $nids
 *   An array of node IDs.
 *
 * @return array
 *   Array of timestamps keyed by node ID. If a node has been previously viewed
 *   by the user, the timestamp in seconds of when the last view occurred;
 *   otherwise, zero.
 *
 * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use
 *   \Drupal\history\HistoryRepositoryInterface::getLastViewed() instead.
 *
 * @see https://www.drupal.org/node/2197189
 */
function history_read_multiple($nids) {
  @trigger_error('history_read_multiple() is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use \Drupal\history\HistoryRepositoryInterface::getLastViewed() instead. See https://www.drupal.org/node/2197189', E_USER_DEPRECATED);
  return \Drupal::service('history.repository')->getLastViewed('node', $nids);
}

/**
 * Updates 'last viewed' timestamp of the specified entity for the current user.
 *
 * @param $nid
 *   The node ID that has been read.
 * @param $account
 *   (optional) The user account to update the history for. Defaults to the
 *   current user.
 *
 * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use
 *   \Drupal\history\HistoryRepositoryInterface::updateLastViewed() instead.
 *
 * @see https://www.drupal.org/node/2197189
 */
function history_write($nid, $account = NULL) {
  @trigger_error('history_write() is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use \Drupal\history\HistoryRepositoryInterface::updateLastViewed() instead. See https://www.drupal.org/node/2197189', E_USER_DEPRECATED);

  if (!isset($account)) {
    $account = \Drupal::currentUser();
  }

  if ($account->isAuthenticated()) {
    $node = Node::load($nid);
    \Drupal::service('history.repository')->updateLastViewed($node);
  }
}

/**
 * Implements hook_cron().
 */
function history_cron() {
  \Drupal::service('history.repository')->purge();
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for node entities.
 */
function history_node_view_alter(array &$build, EntityInterface $node, EntityViewDisplayInterface $display) {
  // Update the history table, stating that this user viewed this node.
  if ($display->getOriginalMode() === 'full') {
    $build['#cache']['contexts'][] = 'user.roles:authenticated';
    if (\Drupal::currentUser()->isAuthenticated()) {
      // When the window's "load" event is triggered, mark the node as read.
      // This still allows for Drupal behaviors (which are triggered on the
      // "DOMContentReady" event) to add "new" and "updated" indicators.
      $build['#attached']['library'][] = 'history/mark-as-read';
      $build['#attached']['drupalSettings']['history']['nodesToMarkAsRead'][$node->id()] = TRUE;
    }
  }

}

/**
 * Implements hook_ENTITY_TYPE_delete() for node entities.
 */
function history_node_delete(EntityInterface $node) {
  \Drupal::service('history.repository')->deleteByEntity($node);
}

/**
 * Implements hook_user_cancel().
 */
function history_user_cancel($edit, UserInterface $account, $method) {
  switch ($method) {
    case 'user_cancel_reassign':
      \Drupal::service('history.repository')->deleteByUser($account);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for user entities.
 */
function history_user_delete($account) {
  \Drupal::service('history.repository')->deleteByUser($account);
}
