/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(function ($, Drupal) {
  Drupal.contextual.ContextualToolbarModelView = function () {
    function _class(options) {
      var _this = this;

      _classCallCheck(this, _class);

      this.strings = options.strings;
      this.isVisible = false;
      this._contextualCount = Drupal.contextual.instances.count;
      this.tabbingContext = null;
      this._isViewing = localStorage.getItem('Drupal.contextualToolbar.isViewing') !== 'false';
      this.$el = options.el;
      window.addEventListener('contextual-instances-added', function () {
        return _this.lockNewContextualLinks();
      });
      this.$el.on({
        click: function click() {
          _this.isViewing = !_this.isViewing;
        },
        touchend: function touchend(event) {
          event.preventDefault();
          event.target.click();
        },
        'click touchend': function clickTouchend() {
          return _this.render();
        }
      });
      $(document).on('keyup', function (event) {
        return _this.onKeypress(event);
      });
      this.manageTabbing(true);
      this.render();
    }

    _createClass(_class, [{
      key: "onKeypress",
      value: function onKeypress(event) {
        if (!this.announcedOnce && event.keyCode === 9 && !this.isViewing) {
          this.announceTabbingConstraint();
          this.announcedOnce = true;
        }

        if (event.keyCode === 27) {
          this.isViewing = true;
        }
      }
    }, {
      key: "render",
      value: function render() {
        this.$el[0].classList.toggle('hidden', this.isVisible);
        var button = this.$el[0].querySelector('button');
        button.classList.toggle('is-active', !this.isViewing);
        button.setAttribute('aria-pressed', !this.isViewing);
        this.contextualCount = Drupal.contextual.instances.count;
      }
    }, {
      key: "updateVisibility",
      value: function updateVisibility() {
        this.isVisible = this.get('contextualCount') > 0;
      }
    }, {
      key: "lockNewContextualLinks",
      value: function lockNewContextualLinks() {
        var _this2 = this;

        Drupal.contextual.instances.forEach(function (model) {
          model.isLocked = !_this2.isViewing;
        });
        this.contextualCount = Drupal.contextual.instances.count;
      }
    }, {
      key: "manageTabbing",
      value: function manageTabbing() {
        var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var tabbingContext = this.tabbingContext;

        if (tabbingContext && !init) {
          if (tabbingContext.active) {
            Drupal.announce(this.strings.tabbingReleased);
          }

          tabbingContext.release();
          this.tabbingContext = null;
        }

        if (!this.isViewing) {
          tabbingContext = Drupal.tabbingManager.constrain($('.contextual-toolbar-tab, .contextual'));
          this.tabbingContext = tabbingContext;
          this.announceTabbingConstraint();
          this.announcedOnce = true;
        }
      }
    }, {
      key: "announceTabbingConstraint",
      value: function announceTabbingConstraint() {
        var strings = this.strings;
        Drupal.announce(Drupal.formatString(strings.tabbingConstrained, {
          '@contextualsCount': Drupal.formatPlural(Drupal.contextual.instances.length, '@count contextual link', '@count contextual links')
        }) + strings.pressEsc);
      }
    }, {
      key: "isViewing",
      get: function get() {
        return this._isViewing;
      },
      set: function set(value) {
        var _this3 = this;

        this._isViewing = value;
        localStorage[!value ? 'setItem' : 'removeItem']('Drupal.contextualToolbar.isViewing', 'false');
        Drupal.contextual.instances.forEach(function (model) {
          model.isLocked = !_this3.isViewing;
        });
        this.manageTabbing();
      }
    }, {
      key: "contextualCount",
      get: function get() {
        return this._contextualCount;
      },
      set: function set(value) {
        if (value !== this._contextualCount) {
          this._contextualCount = value;
          this.updateVisibility();
        }
      }
    }]);

    return _class;
  }();
})(jQuery, Drupal);