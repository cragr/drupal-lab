/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(function ($, Drupal, Modernizr) {
  Drupal.contextual.ContextualModelView = function () {
    function _class($contextual, $region, options) {
      var _this = this;

      _classCallCheck(this, _class);

      this.title = options.title || '';
      this.regionIsHovered = false;
      this._hasFocus = false;
      this._isOpen = false;
      this._isLocked = false;
      this.strings = options.strings;
      this.timer = NaN;
      this.modelId = btoa(Math.random()).substring(0, 12);
      this.$region = $region;
      this.$contextual = $contextual;

      if (!Modernizr.touchevents) {
        $region.on({
          mouseenter: function mouseenter() {
            _this.regionIsHovered = true;
          },
          mouseleave: function mouseleave() {
            _this.regionIsHovered = false;
          },
          'mouseleave mouseenter': function mouseleaveMouseenter() {
            return _this.render();
          }
        });
        $contextual.on('mouseenter', function () {
          _this.focus();

          _this.render();
        });
      }

      this.$contextual.find('.trigger').on({
        click: function click() {
          _this.toggleOpen();
        },
        touchend: function touchend() {
          _this.touchEndToClick();
        },
        focus: function focus() {
          _this.focus();
        },
        blur: function blur() {
          _this.blur();
        },
        'click blur touchend focus': function clickBlurTouchendFocus() {
          return _this.render();
        }
      });
      this.$contextual.find('.contextual-links a').on({
        click: function click() {
          _this.close();

          _this.blur();
        },
        touchend: function touchend() {
          _this.touchEndToClick();
        },
        focus: function focus() {
          _this.focus();
        },
        blur: function blur() {
          _this.waitCloseThenBlur();
        },
        'click blur touchend focus': function clickBlurTouchendFocus() {
          return _this.render();
        }
      });
      this.render();
      $(document).trigger('drupalContextualLinkAdded', {
        $el: $contextual,
        $region: $region,
        model: this
      });
    }

    _createClass(_class, [{
      key: "render",
      value: function render() {
        var isOpen = this.isOpen;
        var isVisible = this.isLocked || this.regionIsHovered || isOpen;
        this.$region.toggleClass('focus', this.hasFocus);
        this.$contextual.toggleClass('open', isOpen).find('.trigger').toggleClass('visually-hidden', !isVisible);
        this.$contextual.find('.contextual-links').prop('hidden', !isOpen);
        this.$contextual.find('.trigger').text(Drupal.t('@action @title configuration options', {
          '@action': !isOpen ? this.strings.open : this.strings.close,
          '@title': this.title
        })).attr('aria-pressed', isOpen);
      }
    }, {
      key: "touchEndToClick",
      value: function touchEndToClick(event) {
        event.preventDefault();
        event.target.click();
      }
    }, {
      key: "waitCloseThenBlur",
      value: function waitCloseThenBlur() {
        var _this2 = this;

        this.timer = window.setTimeout(function () {
          _this2.isOpen = false;
          _this2.hasFocus = false;
        }, 150);
      }
    }, {
      key: "toggleOpen",
      value: function toggleOpen() {
        var newIsOpen = !this.isOpen;
        this.isOpen = newIsOpen;

        if (newIsOpen) {
          this.focus();
        }

        return this;
      }
    }, {
      key: "focus",
      value: function focus() {
        var modelId = this.modelId;
        Drupal.contextual.instances.forEach(function (model) {
          if (model.modelId !== modelId) {
            model.close().blur();
          }
        });
        window.clearTimeout(this.timer);
        this.hasFocus = true;
        return this;
      }
    }, {
      key: "blur",
      value: function blur() {
        if (!this.isOpen) {
          this.hasFocus = false;
        }

        return this;
      }
    }, {
      key: "close",
      value: function close() {
        this.isOpen = false;
        return this;
      }
    }, {
      key: "hasFocus",
      get: function get() {
        return this._hasFocus;
      },
      set: function set(value) {
        this._hasFocus = value;
        this.render();
      }
    }, {
      key: "isOpen",
      get: function get() {
        return this._isOpen;
      },
      set: function set(value) {
        this._isOpen = value;
        this.$region.closest('.contextual-region').find('.contextual .trigger:not(:first)').toggle(!this.isOpen);
      }
    }, {
      key: "isLocked",
      get: function get() {
        return this._isLocked;
      },
      set: function set(value) {
        if (value !== this._isLocked) {
          this._isLocked = value;
          this.render();
        }
      }
    }]);

    return _class;
  }();
})(jQuery, Drupal, Modernizr);