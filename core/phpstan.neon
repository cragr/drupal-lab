# Configuration file for PHPStan static code checking, see https://phpstan.org .
# PHPStan is triggered on Drupal CI in drupalci.yml.
parameters:
  level: 0
  fileExtensions:
    - inc
    - install
    - module
    - php
    - theme
  paths:
    # Just this part is enabled for checking for now, expand later.
    - lib/Drupal/Component
    - lib/Drupal/Core
  # Scan constants in legacy include files.
  bootstrapFiles:
    - includes/common.inc
    # Not sure why PHPStan cannot autoload this file, include it manually for
    # now.
    - modules/system/src/ModuleDependencyMessageTrait.php
  scanDirectories:
    # Scan function definitions in legacy include and module files.
    - includes
    - modules
    # Scan Twig functions.
    - ../vendor/twig/twig/src/Extension
    # Scan optional class dependencies and test classes that PHPStan cannot
    # autoload automatically.
    - tests/Drupal
  ignoreErrors:
    # new static() is a best practice in Drupal, so we cannot fix that.
    - "#^Unsafe usage of new static\\(\\)\\.$#"
    # Local variables created from including a PHP file, we cannot fix that.
    -
      message: "#^Undefined variable\\: \\$overrides$#"
      count: 1
      path: lib/Drupal/Component/Transliteration/PhpTransliteration.php
    -
      message: "#^Undefined variable\\: \\$base$#"
      count: 1
      path: lib/Drupal/Component/Transliteration/PhpTransliteration.php
    # Usage of getFallbackPluginId() is ok here and guarded by an interface
    # check in the related method.
    -
      message: "#^Call to an undefined method Drupal\\\\Component\\\\Plugin\\\\PluginManagerBase\\:\\:getFallbackPluginId\\(\\)\\.$#"
      count: 1
      path: lib/Drupal/Component/Plugin/PluginManagerBase.php
    # DiffEngine is third party legacy code where we want to ignore some
    # undefined variable/property errors.
    -
      message: "#^Access to an undefined property Drupal\\\\Component\\\\Diff\\\\Engine\\\\DiffEngine\\:\\:#"
      path: lib/Drupal/Component/Diff/Engine/DiffEngine.php
    # The Broken Block plugin might call undefined methods, but we don't care
    # because the block is broken anyway.
    -
      message: "#^Call to an undefined method Drupal\\\\Core\\\\Block\\\\Plugin\\\\Block\\\\Broken\\:\\:addContextAssignmentElement\\(\\)\\.$#"
      count: 1
      path: lib/Drupal/Core/Block/Plugin/Block/Broken.php
    # PHPStan bug: https://github.com/phpstan/phpstan/issues/4289
    - "#^Cannot unset offset '.+' on array\\(#"
    # We need to support simpletest in core's test runner.
    -
      message: "#^Class Drupal\\\\simpletest\\\\TestBase not found\\.$#"
      count: 1
      path: lib/Drupal/Core/Test/RunTests/TestFileParser.php
    # The abstract ReadOnlyStream class might call undefined methods in its
    # default implementation, but we don't care about that.
    -
      message: "#^Call to an undefined method Drupal\\\\Core\\\\StreamWrapper\\\\ReadOnlyStream\\:\\:getLocalPath\\(\\)\\.$#"
      count: 1
      path: lib/Drupal/Core/StreamWrapper/ReadOnlyStream.php
    # Drupal core bug: https://www.drupal.org/project/drupal/issues/2787107
    -
      message: "#^Undefined variable\\: \\$definition$#"
      count: 2
      path: lib/Drupal/Core/Menu/MenuTreeStorage.php
