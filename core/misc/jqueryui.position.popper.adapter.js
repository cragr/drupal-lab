/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

(function ($, Drupal, Popper) {
  Drupal.PopperInstances = {};

  var calculateVerticalFixedPositioning = function calculateVerticalFixedPositioning(itemBeingPositioned, positionedItemSettings, referenceItemSettings, positionCss, topComp) {
    if (positionedItemSettings.vertical === 'center') {
      topComp = -itemBeingPositioned.outerHeight() / 2;
    } else if (positionedItemSettings.vertical !== referenceItemSettings.vertical && !(referenceItemSettings.vertical === 'center' && positionedItemSettings.vertical === 'top')) {
      topComp = -itemBeingPositioned.outerHeight();
    }

    if (referenceItemSettings.vertical === 'center') {
      var top = document.documentElement.clientHeight / 2 + topComp;
      var offsets = parseInt(referenceItemSettings.verticalOffset, 10) + parseInt(positionedItemSettings.verticalOffset, 10);
      positionCss.top = "".concat(top + offsets, "px");
    } else {
      var totalVerticalOffset = referenceItemSettings.verticalOffset + positionedItemSettings.verticalOffset;
      var verticalPosition = referenceItemSettings.vertical === 'bottom' ? topComp - totalVerticalOffset : topComp + totalVerticalOffset;
      positionCss[referenceItemSettings.vertical] = "".concat(verticalPosition, "px");
    }

    return {
      positionCss: positionCss,
      topComp: topComp
    };
  };

  var calculateHorizontalFixedPositioning = function calculateHorizontalFixedPositioning(itemBeingPositioned, positionedItemSettings, referenceItemSettings, positionCss, leftComp) {
    if (referenceItemSettings.horizontal !== positionedItemSettings.horizontal) {
      if (positionedItemSettings.horizontal === 'center') {
        leftComp = itemBeingPositioned.outerWidth() / 2;
      } else {
        leftComp = positionedItemSettings.horizontal !== 'left' ? itemBeingPositioned.outerWidth() / 2 : -itemBeingPositioned.outerWidth() / 2;

        if (referenceItemSettings.horizontal !== 'center' && !(referenceItemSettings.horizontal === 'center' && positionedItemSettings.horizontal === 'left')) {
          leftComp = itemBeingPositioned.outerWidth();
        }
      }
    }

    var totalHorizontalOffsets = referenceItemSettings.horizontalOffset + positionedItemSettings.horizontalOffset;

    if (referenceItemSettings.horizontal === 'center') {
      var leftAmount = $(window).outerWidth() / 2 - itemBeingPositioned.outerWidth() / 2 - leftComp + totalHorizontalOffsets;
      positionCss.left = "".concat(leftAmount, "px");
      positionCss.right = 'auto';
    } else if (referenceItemSettings.horizontal === 'right') {
      positionCss.right = "".concat(0 - totalHorizontalOffsets - leftComp, "px");
      positionCss.left = 'auto';
    } else if (referenceItemSettings.horizontal === 'left') {
      positionCss.left = "".concat(totalHorizontalOffsets - leftComp, "px");
      positionCss.right = 'auto';
    }

    return {
      positionCss: positionCss,
      leftComp: leftComp
    };
  };

  var applyFixedPositioning = function applyFixedPositioning(itemBeingPositioned, positionedItemSettings, referenceItemSettings) {
    var positionCss = {
      position: 'fixed'
    };
    var leftComp = 0;
    var topComp = 0;

    var _calculateVerticalFix = calculateVerticalFixedPositioning(itemBeingPositioned, positionedItemSettings, referenceItemSettings, positionCss, topComp);

    positionCss = _calculateVerticalFix.positionCss;
    topComp = _calculateVerticalFix.topComp;

    var _calculateHorizontalF = calculateHorizontalFixedPositioning(itemBeingPositioned, positionedItemSettings, referenceItemSettings, positionCss, leftComp);

    positionCss = _calculateHorizontalF.positionCss;
    leftComp = _calculateHorizontalF.leftComp;
    itemBeingPositioned.css(positionCss);
  };

  var positionWithPopper = function positionWithPopper(itemBeingPositioned, reference, positionedItemSettings, referenceItemSettings, options) {
    var modifiers = [];
    var opposites = {
      left: 'right',
      right: 'left',
      center: 'nope',
      top: 'bottom',
      bottom: 'top'
    };
    var placement = null;
    var primaryOffset = 0;
    var secondaryOffset = 0;
    var hAxis = false;

    if (referenceItemSettings.horizontal !== 'center') {
      hAxis = true;
      placement = referenceItemSettings.horizontal;

      if (referenceItemSettings.vertical !== 'center') {
        placement += referenceItemSettings.vertical === 'top' ? '-start' : '-end';
      }

      if (referenceItemSettings.horizontal !== opposites[positionedItemSettings.horizontal]) {
        var width = itemBeingPositioned.width() / 2;
        secondaryOffset += referenceItemSettings.horizontal !== 'left' ? -width : -width;

        if (positionedItemSettings.horizontal !== 'center' && positionedItemSettings) {
          secondaryOffset *= 2;
        }
      }

      if (referenceItemSettings.vertical !== positionedItemSettings.vertical) {
        var height = itemBeingPositioned.height() / 2;

        if (referenceItemSettings.vertical === 'center' && positionedItemSettings !== 'center') {
          primaryOffset += positionedItemSettings.vertical !== 'bottom' ? height : -height;
        } else {
          primaryOffset += referenceItemSettings.vertical === 'bottom' ? height : -height;
        }

        if (opposites[positionedItemSettings.vertical] === referenceItemSettings.vertical) {
          primaryOffset *= 2;
        }
      }

      primaryOffset += referenceItemSettings.verticalOffset;
      primaryOffset += positionedItemSettings.verticalOffset;
      secondaryOffset += referenceItemSettings.horizontal === 'right' ? referenceItemSettings.horizontalOffset : -referenceItemSettings.horizontalOffset;
      secondaryOffset += referenceItemSettings.horizontal === 'right' ? positionedItemSettings.horizontalOffset : -positionedItemSettings.horizontalOffset;
    } else if (referenceItemSettings.vertical !== 'center') {
      placement = referenceItemSettings.vertical;

      if (referenceItemSettings.horizontal !== opposites[positionedItemSettings.horizontal] && positionedItemSettings.horizontal !== 'center') {
        var _width = itemBeingPositioned.outerWidth() / 2;

        primaryOffset += positionedItemSettings.horizontal !== 'left' ? -_width : _width;
      }

      if (referenceItemSettings.vertical !== opposites[positionedItemSettings.vertical]) {
        var _height = itemBeingPositioned.outerHeight() / 2;

        secondaryOffset += -_height;

        if (positionedItemSettings.vertical !== 'center') {
          secondaryOffset *= 2;
        }
      }
    } else {
      placement = 'top';
      secondaryOffset -= Math.ceil($(reference).outerHeight() / 2);

      if (positionedItemSettings.vertical !== 'bottom') {
        secondaryOffset -= positionedItemSettings.vertical === 'center' ? Math.ceil(itemBeingPositioned.outerHeight() / 2) : itemBeingPositioned.outerHeight();
      }

      if (positionedItemSettings.horizontal !== 'center') {
        var _width2 = Math.ceil(itemBeingPositioned.outerWidth() / 2);

        primaryOffset += positionedItemSettings.horizontal === 'left' ? _width2 : -_width2;
      }
    }

    if (!hAxis) {
      secondaryOffset += placement === 'top' ? -referenceItemSettings.verticalOffset : referenceItemSettings.verticalOffset;
      secondaryOffset += placement === 'top' ? -positionedItemSettings.verticalOffset : positionedItemSettings.verticalOffset;
      primaryOffset += referenceItemSettings.horizontalOffset;
      primaryOffset += positionedItemSettings.horizontalOffset;
    }

    if (!placement) {
      placement = 'auto';
    }

    if (options.hasOwnProperty('collision') && options.collision.indexOf('none') !== -1) {
      modifiers.push({
        name: 'flip',
        enabled: false
      });
    }

    modifiers.push({
      name: 'offset',
      options: {
        offset: [primaryOffset, secondaryOffset]
      }
    });

    if (!itemBeingPositioned[0].hasAttribute('data-drupal-popper-instance')) {
      var uniqueId = Math.random().toString(36).substring(7) + Date.now();
      Drupal.PopperInstances[uniqueId] = Popper.createPopper(reference, itemBeingPositioned[0], {
        placement: placement,
        modifiers: modifiers
      });
    } else {
      var _uniqueId = itemBeingPositioned[0].getAttribute('data-drupal-popper-instance');

      Drupal.PopperInstances[_uniqueId].setOptions({
        placement: placement,
        modifiers: modifiers
      });

      Drupal.PopperInstances[_uniqueId].update();
    }
  };

  $.fn.extend({
    position: function position(options) {
      var itemBeingPositioned = this;
      var reference = {};

      var parseOffset = function parseOffset(offset, element) {
        var rhorizontal = /left|center|right/;
        var rvertical = /top|center|bottom/;
        var roffset = /[+-]\d+(\.[\d]+)?%?/;
        var rposition = /^\w+/;
        var rpercent = /%$/;
        var positions = offset.split(' ');

        if (positions.length === 1) {
          if (rhorizontal.test(positions[0])) {
            positions.push('center');
          } else if (rvertical.test(positions[0])) {
            positions = ['center'].concat(positions);
          }
        }

        var horizontalOffset = roffset.exec(positions[0]);
        var verticalOffset = roffset.exec(positions[1]);
        positions = positions.map(function (pos) {
          return rposition.exec(pos)[0];
        });
        return {
          horizontalOffset: horizontalOffset ? parseFloat(horizontalOffset[0]) * (rpercent.test(horizontalOffset[0]) ? element.offsetWidth / 100 : 1) : 0,
          verticalOffset: verticalOffset ? parseFloat(verticalOffset[0]) * (rpercent.test(verticalOffset[0]) ? element.offsetWidth / 100 : 1) : 0,
          horizontal: positions[0],
          vertical: positions[1]
        };
      };

      var of = options.of;

      if (typeof of === 'string') {
        reference = document.querySelector(of);
      } else if (of instanceof Element) {
        reference = of;
      } else if (of instanceof jQuery) {
        var _of = _slicedToArray(of, 1);

        reference = _of[0];
      } else if (of.toString() === '[object Window]') {
        reference = document.body;
      } else if (of instanceof Event) {}

      var positionedItemSettings = {
        horizontalOffset: 0,
        verticalOffset: 0,
        horizontal: 'center',
        vertical: 'center'
      };
      var referenceItemSettings = {
        horizontalOffset: 0,
        verticalOffset: 0,
        horizontal: 'center',
        vertical: 'center'
      };

      if (options.my) {
        positionedItemSettings = _objectSpread(_objectSpread({}, positionedItemSettings), parseOffset(options.my, itemBeingPositioned[0]));
      }

      if (options.at) {
        referenceItemSettings = _objectSpread(_objectSpread({}, referenceItemSettings), parseOffset(options.at, reference));
      }

      if (reference === document.body) {
        applyFixedPositioning(itemBeingPositioned, positionedItemSettings, referenceItemSettings);
      } else {
        positionWithPopper(itemBeingPositioned, reference, positionedItemSettings, referenceItemSettings, options);
      }
    }
  });
})(jQuery, Drupal, Popper);