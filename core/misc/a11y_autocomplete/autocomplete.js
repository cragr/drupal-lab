/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DrupalAutocomplete = function () {
  function DrupalAutocomplete(input) {
    var _this = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, DrupalAutocomplete);

    this.keyCode = Object.freeze({
      TAB: 9,
      RETURN: 13,
      ESC: 27,
      SPACE: 32,
      PAGEUP: 33,
      PAGEDOWN: 34,
      END: 35,
      HOME: 36,
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40
    });
    this.input = input;
    this.count = document.querySelectorAll('[data-drupal-autocomplete-input]').length;
    this.listboxId = "autocomplete-listbox-".concat(this.count);
    var defaultOptions = {
      autoFocus: false,
      firstCharacterDenylist: ',',
      minChars: 1,
      maxItems: 20,
      sort: false,
      path: false,
      displayLabels: true,
      disabled: false,
      list: [],
      cardinality: 1,
      inputClass: '',
      ulClass: '',
      itemClass: '',
      loadingClass: 'drupal-autocomplete-loading',
      separatorChar: ',',
      createLiveRegion: true,
      listZindex: 100,
      inputAssistiveHint: 'When autocomplete results are available use up and down arrows to review and enter to select. Touch device users, explore by touch or with swipe gestures.',
      minCharAssistiveHint: 'Type @count or more characters for results',
      messages: {
        noResults: 'No results found',
        moreThanMaxResults: 'There are at least @count results available. Type additional characters to refine your search.',
        someResults: 'There are @count results available.',
        oneResult: 'There is one result available.'
      },
      allowRepeatValues: null,
      searchDelay: 300
    };
    this.options = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions), options), this.attributesToOptions());

    if (typeof this.options.list === 'string') {
      this.options.list = JSON.parse(this.options.list);
    }

    this.selected = null;
    this.preventCloseOnBlur = false;
    this.isOpened = false;
    this.cache = [];
    this.suggestionItems = [];
    this.hasAnnouncedOnce = false;
    this.announceTimeOutId = null;
    this.searchTimeOutId = null;
    this.totalSuggestions = 0;
    this.wrapper = document.createElement('div');
    this.implementWrapper();
    this.inputDescribedBy = this.input.getAttribute('aria-describedby');
    this.inputHintRead = false;
    this.implementInput();
    this.ul = document.createElement('ul');
    this.implementList();
    this.appendList();
    this.liveRegion = null;
    this.implementLiveRegion();
    this.events = {
      input: {
        input: function input(e) {
          return _this.inputListener(e);
        },
        blur: function blur(e) {
          return _this.blurHandler(e);
        },
        keydown: function keydown(e) {
          return _this.inputKeyDown(e);
        }
      },
      ul: {
        mousedown: function mousedown(e) {
          return e.preventDefault();
        },
        click: function click(e) {
          return _this.itemClick(e);
        },
        keydown: function keydown(e) {
          return _this.listKeyDown(e);
        },
        blur: function blur(e) {
          return _this.blurHandler(e);
        },
        focus: function focus(e) {
          return _this.listFocus(e);
        }
      }
    };
    Object.keys(this.events).forEach(function (elementName) {
      Object.keys(_this.events[elementName]).forEach(function (eventName) {
        _this[elementName].addEventListener(eventName, _this.events[elementName][eventName]);
      });
    });
    this.triggerEvent('autocomplete-created');
  }

  _createClass(DrupalAutocomplete, [{
    key: "implementWrapper",
    value: function implementWrapper() {
      this.wrapper.setAttribute('data-drupal-autocomplete-wrapper', '');
      this.input.parentNode.appendChild(this.wrapper);
      this.wrapper.appendChild(this.input);
    }
  }, {
    key: "implementInput",
    value: function implementInput() {
      var _this2 = this;

      this.input.setAttribute('aria-autocomplete', 'list');
      this.input.setAttribute('autocomplete', 'off');
      this.input.setAttribute('data-drupal-autocomplete-input', '');
      this.input.setAttribute('aria-owns', this.listboxId);
      this.input.setAttribute('role', 'combobox');
      this.input.setAttribute('aria-expanded', 'false');

      if (this.options.inputClass.length > 0) {
        this.options.inputClass.split(' ').forEach(function (className) {
          return _this2.input.classList.add(className);
        });
      }

      if (!this.input.hasAttribute('id')) {
        this.input.setAttribute("autocomplete-input-".concat(this.count));
      }

      var description = document.createElement('span');
      description.textContent = this.minCharsMessage() + this.options.inputAssistiveHint;
      description.classList.add('visually-hidden');

      if (this.inputDescribedBy) {
        description.setAttribute('data-drupal-autocomplete-assistive-hint', this.count);
        document.querySelector("[id=\"".concat(this.inputDescribedBy, "\"]")).appendChild(description);
      } else {
        description.setAttribute('id', "assistive-hint-".concat(this.count));
        this.input.setAttribute('aria-describedby', "assistive-hint-".concat(this.count));
        this.wrapper.appendChild(description);
      }
    }
  }, {
    key: "appendList",
    value: function appendList() {
      this.input.parentNode.appendChild(this.ul);
    }
  }, {
    key: "implementList",
    value: function implementList() {
      var _this3 = this;

      this.ul.setAttribute('role', 'listbox');
      this.ul.setAttribute('data-drupal-autocomplete-list', '');
      this.ul.setAttribute('id', this.listboxId);
      this.ul.setAttribute('hidden', '');

      if (this.options.ulClass.length > 0) {
        this.options.ulClass.split(' ').forEach(function (className) {
          return _this3.ul.classList.add(className);
        });
      }
    }
  }, {
    key: "implementLiveRegion",
    value: function implementLiveRegion() {
      if (this.options.createLiveRegion === true) {
        this.liveRegion = document.createElement('span');
        this.liveRegion.setAttribute('data-drupal-autocomplete-live-region', '');
        this.liveRegion.setAttribute('aria-live', 'assertive');
        this.input.parentNode.appendChild(this.liveRegion);
      }

      if (typeof this.options.liveRegion === 'string') {
        this.liveRegion = document.querySelector(this.options.liveRegion);
      }
    }
  }, {
    key: "attributesToOptions",
    value: function attributesToOptions() {
      var options = {};
      var dataAutocompleteAttributeOptions = this.input.getAttribute('data-autocomplete') ? JSON.parse(this.input.getAttribute('data-autocomplete')) : {};

      for (var i = 0; i < this.input.attributes.length; i++) {
        if (this.input.attributes[i].nodeName.includes('data-autocomplete') && this.input.attributes[i].nodeName !== 'data-autocomplete') {
          var optionName = this.input.attributes[i].nodeName.replace('data-autocomplete-', '').split('-').map(function (w) {
            return w.charAt(0).toUpperCase() + w.slice(1);
          }).join('');
          optionName = optionName.charAt(0).toLowerCase() + optionName.slice(1);
          var value = this.input.attributes[i].nodeValue;

          if (['true', 'false'].includes(value)) {
            options[optionName] = value === 'true';
          } else {
            options[optionName] = value;
          }
        }
      }

      return _objectSpread(_objectSpread({}, options), dataAutocompleteAttributeOptions);
    }
  }, {
    key: "blurHandler",
    value: function blurHandler(e) {
      window.clearTimeout(this.announceTimeOutId);

      if (this.preventCloseOnBlur) {
        this.preventCloseOnBlur = false;
        e.preventDefault();
      } else {
        this.triggerEvent('autocomplete-change');
        this.close();
      }
    }
  }, {
    key: "removeAssistiveHint",
    value: function removeAssistiveHint() {
      if (!this.inputHintRead) {
        if (this.inputDescribedBy) {
          var appendedHint = document.querySelector("[data-drupal-autocomplete-assistive-hint=\"".concat(this.count, "\"]"));
          appendedHint.parentNode.removeChild(appendedHint);
        } else {
          this.input.removeAttribute('aria-describedby');
        }

        this.inputHintRead = true;
      }
    }
  }, {
    key: "listKeyDown",
    value: function listKeyDown(e) {
      if (!this.ul.contains(document.activeElement) || e.ctrlKey || e.altKey || e.metaKey || e.keyCode === this.keyCode.TAB) {
        return;
      }

      this.ul.querySelectorAll('[aria-selected="true"]').forEach(function (li) {
        li.setAttribute('aria-selected', 'false');
      });

      switch (e.keyCode) {
        case this.keyCode.SPACE:
        case this.keyCode.RETURN:
          this.selectItem(document.activeElement, e);
          this.close();
          this.input.focus();
          break;

        case this.keyCode.ESC:
        case this.keyCode.TAB:
          this.input.focus();
          this.close();
          break;

        case this.keyCode.UP:
          this.focusPrev();
          break;

        case this.keyCode.DOWN:
          this.focusNext();
          break;

        default:
          break;
      }

      e.stopPropagation();
      e.preventDefault();
    }
  }, {
    key: "listFocus",
    value: function listFocus(e) {}
  }, {
    key: "focusPrev",
    value: function focusPrev() {
      this.preventCloseOnBlur = true;
      var currentItem = document.activeElement.getAttribute('data-drupal-autocomplete-item');
      var prevIndex = parseInt(currentItem, 10) - 1;
      var previousItem = this.ul.querySelector("[data-drupal-autocomplete-item=\"".concat(prevIndex, "\"]"));

      if (previousItem) {
        this.highlightItem(previousItem);
      } else {
        this.input.focus();
      }
    }
  }, {
    key: "focusNext",
    value: function focusNext() {
      var currentItem = document.activeElement.getAttribute('data-drupal-autocomplete-item');
      var nextIndex = parseInt(currentItem, 10) + 1;
      var nextItem = this.ul.querySelector("[data-drupal-autocomplete-item=\"".concat(nextIndex, "\"]"));

      if (nextItem) {
        this.preventCloseOnBlur = true;
        this.highlightItem(nextItem);
      }
    }
  }, {
    key: "highlightItem",
    value: function highlightItem(item) {
      item.setAttribute('aria-selected', true);
      item.focus();
      var itemIndex = item.closest('[data-drupal-autocomplete-item]').getAttribute('data-drupal-autocomplete-item');
      this.triggerEvent('autocomplete-highlight', {
        selected: this.suggestions[itemIndex]
      });
      this.announceHighlight(item);
    }
  }, {
    key: "announceHighlight",
    value: function announceHighlight(item) {
      var _this4 = this;

      window.clearTimeout(this.announceTimeOutId);
      this.announceTimeOutId = setTimeout(function () {
        return _this4.sendToLiveRegion(_this4.highlightMessage(item));
      }, 500);
    }
  }, {
    key: "highlightMessage",
    value: function highlightMessage(item) {
      return "".concat(item.innerText, " ").concat(item.getAttribute('aria-posinset'), " of ").concat(this.ul.children.length, " is highlighted");
    }
  }, {
    key: "inputKeyDown",
    value: function inputKeyDown(e) {
      var keyCode = e.keyCode;

      if (this.isOpened) {
        if (keyCode === this.keyCode.ESC) {
          this.close();
        }

        if (keyCode === this.keyCode.DOWN) {
          e.preventDefault();
          this.preventCloseOnBlur = true;
          this.highlightItem(this.ul.querySelector('li'));
        }
      }

      this.removeAssistiveHint();
    }
  }, {
    key: "itemClick",
    value: function itemClick(e) {
      var li = e.target;

      if (li && e.button === 0) {
        this.selectItem(li, e);
      }
    }
  }, {
    key: "selectItem",
    value: function selectItem(elementWithItem, e) {
      var itemIndex = elementWithItem.closest('[data-drupal-autocomplete-item]').getAttribute('data-drupal-autocomplete-item');
      var toSelect = this.suggestions[itemIndex];
      var selected = this.triggerEvent('autocomplete-select', {
        selected: toSelect
      }, true, e);

      if (selected) {
        this.replaceInputValue(elementWithItem);
        e.preventDefault();
        this.close();
        this.triggerEvent('autocomplete-selection-added', {
          added: elementWithItem.textContent
        });
      }
    }
  }, {
    key: "replaceInputValue",
    value: function replaceInputValue(element) {
      var itemIndex = element.closest('[data-drupal-autocomplete-item]').getAttribute('data-drupal-autocomplete-item');
      this.selected = this.suggestions[itemIndex];
      var separator = this.separator();

      if (separator.length > 0) {
        var before = this.previousItems(separator);
        this.input.value = "".concat(before).concat(element.textContent);
      } else {
        this.input.value = element.textContent;
      }
    }
  }, {
    key: "separator",
    value: function separator() {
      var cardinality = this.options.cardinality;
      var numItems = this.splitValues().length - 1;
      return numItems < cardinality || parseInt(cardinality, 10) <= 0 ? this.options.separatorChar : '';
    }
  }, {
    key: "previousItems",
    value: function previousItems(separator) {
      var escapedSeparator = separator.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      var regex = new RegExp("^.+".concat(escapedSeparator, "\\s*|"));
      var match = this.inputValue().match(regex)[0];
      return match && match.length > 0 ? "".concat(match.trim(), " ") : '';
    }
  }, {
    key: "doSearch",
    value: function doSearch(e) {
      var _this5 = this;

      if (this.options.disabled) {
        return;
      }

      var inputId = this.input.getAttribute('id');
      var searchTerm = this.extractLastInputValue();

      if (searchTerm && searchTerm.length < this.options.minChars) {
        return;
      }

      if (!this.triggerEvent('autocomplete-pre-search', {}, true, e)) {
        return;
      }

      if (!(inputId in this.cache)) {
        this.cache[inputId] = {};
      }

      if (searchTerm && searchTerm.length > 0) {
        if (this.cache[inputId].hasOwnProperty(searchTerm)) {
          this.suggestionItems = this.cache[inputId][searchTerm];
          this.displayResults();
        } else if (this.options.list.length === 0 && this.options.path) {
          this.options.loadingClass.split(' ').forEach(function (className) {
            return _this5.input.classList.add(className);
          });
          fetch(this.queryUrl(searchTerm)).then(function (response) {
            return response.json();
          }).then(function (results) {
            _this5.options.loadingClass.split(' ').forEach(function (className) {
              return _this5.input.classList.remove(className);
            });

            _this5.suggestionItems = results;

            _this5.displayResults();

            _this5.cache[inputId][searchTerm] = results;
          });
        } else {
          this.suggestionItems = this.options.list;
          this.displayResults();
        }
      } else {
        this.suggestionItems = [];
        this.displayResults();
      }
    }
  }, {
    key: "inputListener",
    value: function inputListener(e) {
      var _this6 = this;

      if (!this.searchTimeOutId || this.options.searchDelay === 0) {
        this.searchTimeOutId = setTimeout(function () {
          _this6.doSearch(e);

          _this6.searchTimeOutId = null;
        }, this.options.searchDelay);
      }
    }
  }, {
    key: "queryUrl",
    value: function queryUrl(searchTerm) {
      return "".concat(this.options.path, "?q=").concat(searchTerm);
    }
  }, {
    key: "normalizeSuggestionItems",
    value: function normalizeSuggestionItems() {
      this.suggestionItems = this.suggestionItems.map(function (item) {
        if (typeof item === 'string') {
          item = {
            value: item,
            label: item
          };
        } else if (item.value && !item.label) {
          item = {
            value: item.value,
            label: item.value
          };
        } else if (item.label && !item.value) {
          item = {
            value: item.label,
            label: item.label
          };
        }

        return item;
      });
    }
  }, {
    key: "prepareSuggestionList",
    value: function prepareSuggestionList(typed) {
      var _this7 = this;

      this.normalizeSuggestionItems();

      if (typed) {
        this.suggestions = this.suggestionItems.filter(function (item) {
          return _this7.filterResults(item, typed);
        });
      } else {
        this.suggestions = this.suggestionItems;
      }

      if (this.options.sort !== false) {
        this.sortSuggestions();
      }

      this.totalSuggestions = this.suggestions.length;
      this.suggestions = this.suggestions.slice(0, this.options.maxItems);
      this.triggerEvent('autocomplete-response', {
        list: this.suggestions
      });
      this.suggestions.forEach(function (suggestion, index) {
        _this7.ul.appendChild(_this7.suggestionItem(suggestion, index));
      });
    }
  }, {
    key: "displayResults",
    value: function displayResults() {
      var _this8 = this;

      var typed = this.extractLastInputValue();
      this.ul.innerHTML = '';

      if (typed && this.suggestionItems.length > 0) {
        this.prepareSuggestionList(typed);
      }

      if (this.ul.children.length === 0) {
        this.close();
      } else {
        this.open();
      }

      window.clearTimeout(this.announceTimeOutId);
      this.announceTimeOutId = setTimeout(function () {
        return _this8.sendToLiveRegion(_this8.resultsMessage(_this8.ul.children.length));
      }, 1400);
    }
  }, {
    key: "sortSuggestions",
    value: function sortSuggestions() {
      this.suggestions.sort(function (prior, current) {
        return prior.label.toUpperCase() > current.label.toUpperCase() ? 1 : -1;
      });
    }
  }, {
    key: "suggestionItem",
    value: function suggestionItem(suggestion, itemIndex) {
      var _this9 = this;

      var li = document.createElement('li');
      li.innerHTML = this.formatSuggestionItem(suggestion, li);

      if (this.options.itemClass.length > 0) {
        this.options.itemClass.split(' ').forEach(function (className) {
          return li.classList.add(className);
        });
      }

      li.setAttribute('role', 'option');
      li.setAttribute('tabindex', '-1');
      li.setAttribute('id', "suggestion-".concat(this.count, "-").concat(itemIndex));
      li.setAttribute('data-drupal-autocomplete-item', itemIndex);
      li.setAttribute('aria-posinset', itemIndex + 1);
      li.setAttribute('aria-selected', 'false');

      li.onblur = function (e) {
        return _this9.blurHandler(e);
      };

      return li;
    }
  }, {
    key: "formatSuggestionItem",
    value: function formatSuggestionItem(suggestion, li) {
      var propertyToDisplay = this.options.displayLabels ? 'label' : 'value';
      return suggestion[propertyToDisplay].trim();
    }
  }, {
    key: "open",
    value: function open() {
      this.input.setAttribute('aria-expanded', 'true');
      this.ul.removeAttribute('hidden');
      this.ul.style.zIndex = this.options.listZindex;
      this.isOpened = true;
      this.ul.style.minWidth = "".concat(this.input.offsetWidth - 4, "px");
      this.triggerEvent('autocomplete-open');

      if (this.options.autoFocus) {
        this.preventCloseOnBlur = true;
        this.highlightItem(this.ul.querySelector('[data-drupal-autocomplete-item="0"]'));
      }
    }
  }, {
    key: "close",
    value: function close() {
      if (this.isOpened) {
        this.input.setAttribute('aria-expanded', 'false');
        this.ul.setAttribute('hidden', '');
        this.isOpened = false;
        this.triggerEvent('autocomplete-close');
      }
    }
  }, {
    key: "extractLastInputValue",
    value: function extractLastInputValue() {
      return this.splitValues().pop();
    }
  }, {
    key: "inputValue",
    value: function inputValue() {
      return this.input.value;
    }
  }, {
    key: "splitValues",
    value: function splitValues() {
      var value = this.inputValue();
      var result = [];
      var quote = false;
      var current = '';
      var valueLength = value.length;

      for (var i = 0; i < valueLength; i++) {
        var character = value.charAt(i);

        if (character === '"') {
          current += character;
          quote = !quote;
        } else if (character === this.options.separatorChar && !quote) {
          result.push(current.trim());
          current = '';
        } else {
          current += character;
        }
      }

      if (value.length > 0) {
        result.push(current.trim());
      }

      return result;
    }
  }, {
    key: "filterResults",
    value: function filterResults(suggestion, typed) {
      var _this$options = this.options,
          firstCharacterDenylist = _this$options.firstCharacterDenylist,
          cardinality = _this$options.cardinality;
      var suggestionValue = suggestion.value;
      var currentValues = this.splitValues();

      if (firstCharacterDenylist.indexOf(typed[0]) !== -1 || cardinality > 0 && currentValues.length > cardinality || currentValues.indexOf(suggestionValue) !== -1 && !this.options.allowRepeatValues) {
        return false;
      }

      return RegExp(this.extractLastInputValue().trim().replace(/[-\\^$*+?.()|[\]{}]/g, '\\$&'), 'i').test(suggestionValue);
    }
  }, {
    key: "announceResults",
    value: function announceResults(count) {
      var message = this.resultsMessage(count);
      this.sendToLiveRegion(message);
    }
  }, {
    key: "sendToLiveRegion",
    value: function sendToLiveRegion(message) {
      if (this.liveRegion) {
        this.liveRegion.textContent = message;
      }
    }
  }, {
    key: "resultsMessage",
    value: function resultsMessage(count) {
      var maxItems = this.options.maxItems;
      var message = '';

      if (count === 0) {
        message = this.options.messages.noResults;
      } else if (maxItems === this.totalSuggestions) {
        message = this.options.messages.moreThanMaxResults;
      } else if (count === 1) {
        message = this.options.messages.oneResult;
      } else {
        message = this.options.messages.someResults;
      }

      return message.replace('@count', count);
    }
  }, {
    key: "minCharsMessage",
    value: function minCharsMessage() {
      if (this.options.minChars > 1) {
        return "".concat(this.options.minCharAssistiveHint.replace('@count', this.options.minChars), ". ");
      }

      return '';
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this10 = this;

      Object.keys(this.events).forEach(function (elementName) {
        Object.keys(_this10.events[elementName]).forEach(function (eventName) {
          _this10[elementName].removeEventListener(eventName, _this10.events[elementName][eventName]);
        });
      });
      this.ul.remove();
      this.triggerEvent('autocomplete-destroy');
    }
  }, {
    key: "triggerEvent",
    value: function triggerEvent(type) {
      var additionalData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var originalEvent = arguments.length > 3 ? arguments[3] : undefined;
      var event = new CustomEvent(type, {
        detail: _objectSpread({
          autocomplete: this
        }, additionalData),
        cancelable: cancelable,
        originalEvent: originalEvent
      });

      if (originalEvent) {
        event.originalEvent = originalEvent;
      }

      return this.input.dispatchEvent(event);
    }
  }]);

  return DrupalAutocomplete;
}();

window.DrupalAutocomplete = DrupalAutocomplete;