/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function ($, Drupal) {
  var oldOn = $.fn.on;

  var findHandler = function findHandler(fn, data, selector) {
    if (typeof fn === 'function') {
      return fn;
    }

    if (typeof data === 'function') {
      return data;
    }

    if (typeof selector === 'function') {
      return selector;
    }

    return null;
  };

  $.fn.extend({
    on: function on() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var types = args[0],
          selector = args[1],
          data = args[2],
          fn = args[3],
          one = args[4];
      var eventsToAddListenersTo = {};
      var autocompleteEvents = {
        autocompletechange: 'autocomplete-change',
        autocompleteclose: 'autocomplete-close',
        autocompletecreate: 'autocomplete-created',
        autocompletefocus: 'autocomplete-highlight',
        autocompleteopen: 'autocomplete-open',
        autocompleteresponse: 'autocomplete-response',
        autocompletesearch: 'autocomplete-pre-search',
        autocompleteselect: 'autocomplete-select'
      };
      var autocompleteKeys = Object.keys(autocompleteEvents);

      if (typeof types === 'string' && types.indexOf('autocomplete') !== -1) {
        var handler = findHandler(fn, data, selector);
        types.split(' ').forEach(function (eventName) {
          if (autocompleteKeys.includes(eventName.split('.')[0])) {
            eventsToAddListenersTo[eventName] = handler;
          }
        });
      } else if (_typeof(types) === 'object') {
        Object.keys(types).forEach(function (eventName) {
          if (autocompleteKeys.includes(eventName)) {
            eventsToAddListenersTo[eventName] = types[eventName];
          }
        });
      }

      var autocompleteEventsToShim = Object.keys(eventsToAddListenersTo);

      if (autocompleteEventsToShim.length) {
        var id = this.attr('id');
        var instance = Drupal.Autocomplete.instances[id];
        var that = this;
        var config = {};

        if (one === 1) {
          config.once = true;
        }

        autocompleteEventsToShim.forEach(function (eventName) {
          var eventHandler = eventsToAddListenersTo[eventName];

          var shimmedEventHandler = function shimmedEventHandler(e) {
            var ui = {};

            if (eventName === 'autocompleteresponse') {
              ui.content = e.detail.list;
            }

            if (eventName === 'autocompletechange') {
              e.originalEvent = $.Event('blur');
              ui.item = instance.selected;
            }

            if (eventName === 'autocompletefocus') {
              ui.item = e.detail.selected;
              e.originalEvent = $.Event('menufocus');
            }

            if (eventName === 'autocompleteselect') {
              ui.item = e.detail.selected;
              e.originalEvent.type = 'menuselect';
            }

            if (eventName === 'autocompleteclose') {
              e.originalEvent = $.Event('menuselect');
            }

            e.type = eventName;
            var handle = eventHandler.bind(that);
            var eventReturn = handle(_objectSpread(_objectSpread({}, $.Event(eventName, e)), {}, {
              type: eventName
            }), ui);

            if (eventReturn === false) {
              e.preventDefault();
            }

            return eventReturn;
          };

          instance.input.addEventListener(autocompleteEvents[eventName], shimmedEventHandler, config);
        });
      }

      return oldOn.apply(this, args);
    }
  });
})(jQuery, Drupal);